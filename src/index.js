// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var Filter, SavedInput, Video, VideoList, autoplayInput, blockedVideos, expandInput, filter, historyInput, onPlayerReady, onPlayerStateChange, readDataInterval, title, unwatchedVideos, updateInput, watchedVideos;
    Video = (function() {
      function Video(title1, id1, author, authorId, publishedDate, description1, thumbnail1) {
        this.title = title1;
        this.id = id1;
        this.author = author;
        this.authorId = authorId;
        this.description = description1;
        this.thumbnail = thumbnail1;
        this.publishedDate = new Date(publishedDate);
      }

      Video.fromJson = function(json) {
        return new Video(json.title, json.id, json.author, json.authorId, json.publishedDate, json.description, json.thumbnail);
      };

      Video.prototype.addToDom = function(parent, index, parentName) {
        var description, id, markButton, videoContainer;
        description = $('<div/>', {
          "class": "description"
        });
        this.description.split(/\n(?:\n)+/).forEach(function(paragraph) {
          return description.append($('<p>' + paragraph.replace(/\n/g, '<br>') + '</p>'));
        });
        description.find('p').linkify({
          target: "_blank"
        });
        markButton = $('<button/>', {
          "class": 'mark btn btn-default',
          title: 'Mark as ' + (parentName === 'Unwatched' ? 'watched' : 'unwatched')
        }).append($('<i/>', {
          "class": 'fa fa-' + (parentName === 'Unwatched' ? 'check' : 'remove') + ' fa-3x'
        }));
        if (parentName === 'Blocked') {
          markButton = null;
        }
        videoContainer = $('<div/>', {
          "class": 'video-container',
          id: 'video-' + this.id
        }).append($('<input/>', {
          type: 'checkbox',
          "class": 'expanded',
          id: 'expand-' + this.id
        })).append($('<div/>', {
          "class": 'video'
        }).append($('<div/>', {
          "class": 'thumbnail'
        }).append($('<p/>', {
          text: this.title
        })).append($('<img/>', {
          src: this.thumbnail
        })).append($('<i/>', {
          "class": 'fa fa-play fa-3x'
        })))).append($('<div/>', {
          "class": 'video-info'
        }).append($('<div/>', {
          "class": 'author'
        }).append($('<a/>', {
          href: 'http://www.youtube.com/channel/' + this.authorId,
          target: '_blank',
          text: 'by ' + this.author
        }))).append($('<div/>', {
          "class": 'upload-date',
          text: 'uploaded ' + new Date(this.publishedDate).toLocaleString()
        })).append($('<input/>', {
          type: 'checkbox',
          "class": 'truncated',
          id: 'trunc-' + this.id,
          'checked': true
        })).append(description).append($('<label/>', {
          "for": 'trunc-' + this.id
        }).append($('<span/>', {
          "class": 'read-more',
          text: 'Read more'
        })).append($('<span/>', {
          "class": 'read-less',
          text: 'Read less'
        })))).append($('<div/>', {
          "class": 'side-buttons'
        }).append(markButton).append($('<a/>', {
          "class": 'youtube-watch btn btn-default',
          title: 'Watch on YouTube',
          href: 'https://www.youtube.com/watch?v=' + this.id,
          target: '_blank'
        }).append($('<i/>', {
          "class": 'fa fa-youtube fa-3x'
        }))).append($('<label/>', {
          "for": 'expand-' + this.id
        }).append($('<div/>', {
          "class": 'expand-player btn btn-default',
          title: 'Expand Video'
        }).append($('<i/>', {
          "class": 'fa fa-expand fa-3x'
        }))).append($('<div/>', {
          "class": 'compress-player btn btn-default',
          title: 'Compress Video'
        }).append($('<i/>', {
          "class": 'fa fa-compress fa-3x'
        })))));
        if (index === 0) {
          parent.prepend(videoContainer);
        } else if (index > $(parent).children().length) {
          parent.append(videoContainer);
        } else {
          parent.children(":nth-child(" + index + ")").after(videoContainer);
        }
        $('.expanded').change(function() {
          var videoElement;
          videoElement = $(this).next();
          return videoElement.height(videoElement.width() * 9 / 16);
        });
        if (videoContainer.find('.description').height() >= 250) {
          videoContainer.find('.video-info').addClass('long');
        }
        id = this.id;
        videoContainer.on('click', '.mark', function() {
          if (parentName === 'Unwatched') {
            return watchedVideos.add(unwatchedVideos.remove(id));
          } else {
            return unwatchedVideos.add(watchedVideos.remove(id));
          }
        });
        return videoContainer.on('click', '.video', function() {
          return new YT.Player(this, {
            height: $(this).width * 9 / 16,
            width: $(this).width,
            videoId: id,
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            }
          });
        });
      };

      return Video;

    })();
    VideoList = (function() {
      function VideoList(storageString, selector, reversedOrder, name, tabTextSelector, tabRadioSelector) {
        var video, videoList;
        this.storageString = storageString;
        this.name = name;
        this.tabTextSelector = tabTextSelector;
        this.tabRadioSelector = tabRadioSelector;
        this.htmlElement = $(selector);
        videoList = JSON.parse(localStorage.getItem(this.storageString)) || [];
        this.videos = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = videoList.length; j < len; j++) {
            video = videoList[j];
            results.push(Video.fromJson(video));
          }
          return results;
        })();
        this.order = (reversedOrder ? 1 : -1);
        this.sort();
        this.deduplicate();
        this.save();
        this.update();
      }

      VideoList.prototype.add = function(newVideo) {
        var index, lastChild;
        index = this.indexOf(newVideo.id);
        if (index === -1) {
          this.videos.push(newVideo);
          this.sort();
          this.deduplicate();
          this.save();
          if (this.htmlElement.children().length > this.indexOf(newVideo.id)) {
            newVideo.addToDom(this.htmlElement, this.indexOf(newVideo.id), this.name);
            lastChild = this.htmlElement.children().last();
            if (lastChild.find('.thumbnail').length > 0) {
              lastChild.remove();
            }
          }
          this.update();
        } else {
          this.videos[index] = newVideo;
        }
        return this;
      };

      VideoList.prototype.remove = function(id) {
        var index, video;
        index = this.indexOf(id);
        if (index !== -1) {
          video = this.videos[index];
          this.videos.splice(index, 1);
          this.sort();
          this.save();
          $('#video-' + video.id).remove();
          this.update();
          return video;
        }
      };

      VideoList.prototype.indexOf = function(id) {
        var i, j, ref;
        for (i = j = 0, ref = this.videos.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if (this.videos[i].id === id) {
            return i;
          }
        }
        return -1;
      };

      VideoList.prototype.get = function(index) {
        return this.videos[index];
      };

      VideoList.prototype.find = function(id) {
        var j, len, ref, video;
        ref = this.videos;
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.id === id) {
            return video;
          }
        }
      };

      VideoList.prototype.length = function() {
        return this.videos.length;
      };

      VideoList.prototype.clearOlderThan = function(date) {
        var j, len, ref, results, video;
        ref = this.videos;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.publishedDate < date) {
            results.push(this.remove(video.id));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      VideoList.prototype.sort = function() {
        var order;
        order = this.order;
        this.videos = this.videos.sort(function(a, b) {
          return (a.publishedDate > b.publishedDate ? 1 : -1) * order;
        });
        return this;
      };

      VideoList.prototype.deduplicate = function() {
        var j, len, results, temp, video;
        temp = this.videos;
        this.videos = [];
        results = [];
        for (j = 0, len = temp.length; j < len; j++) {
          video = temp[j];
          if (this.find(video.id) == null) {
            results.push(this.videos.push(video));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      VideoList.prototype.save = function() {
        return localStorage.setItem(this.storageString, JSON.stringify(this.videos));
      };

      VideoList.prototype.update = function() {
        $(this.tabTextSelector).find('.text').text(this.name + " (" + (this.length()) + ")");
        if (this.name === 'Unwatched') {
          $('title').text((this.length() > 0 ? "(" + (this.length()) + ") " : '') + title);
        }
        return this.addVideoToDom();
      };

      VideoList.prototype.decideVisible = function() {
        if ($(this.tabRadioSelector).prop('checked')) {
          this.htmlElement.show();
          return true;
        } else {
          this.htmlElement.hide();
          return false;
        }
      };

      VideoList.prototype.addVideoToDom = function() {
        var i, j, ref, results, video;
        if (this.decideVisible()) {
          if ($(window).scrollTop() + $(window).innerHeight() * 2 >= $(document).height()) {
            results = [];
            for (i = j = 0, ref = this.length(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              video = this.get(i);
              if ($("#video-" + video.id).length === 0) {
                video.addToDom(this.htmlElement, i, this.name);
                this.addVideoToDom();
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        }
      };

      VideoList.prototype.addAllFrom = function(sourceList) {
        var child, element, j, len, ref;
        this.videos = this.videos.concat(sourceList.videos);
        this.sort();
        this.deduplicate();
        this.save();
        sourceList.videos = [];
        sourceList.save();
        ref = this.htmlElement.children('.video-container');
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          element = $(child);
          if (element.find('.thumbnail').length > 0) {
            element.remove();
          }
        }
        sourceList.htmlElement.children('.video-container').remove();
        sourceList.update();
        return this.update();
      };

      return VideoList;

    })();
    Filter = (function() {
      function Filter(storageString, elementSelector) {
        var addRow, filter, j, len, ref, self;
        this.storageString = storageString;
        this.contents = JSON.parse(localStorage.getItem(this.storageString)) || [];
        this.element = $(elementSelector);
        self = this;
        addRow = function(channel, type, regexes) {
          var row, typeElement;
          if (regexes == null) {
            regexes = [];
          }
          row = $('<div/>', {
            "class": 'row'
          });
          row.append($('<input/>', {
            "class": 'author',
            type: 'text',
            value: channel
          }));
          typeElement = $('<select/>', {
            "class": 'type form-control'
          });
          typeElement.append($('<option/>', {
            value: 'blacklist'
          }).text('Blacklist'));
          typeElement.append($('<option/>', {
            value: 'whitelist'
          }).text('Whitelist'));
          typeElement.val(type);
          row.append(typeElement);
          row.append($('<input/>', {
            "class": 'regex',
            type: 'text',
            value: regexes.join()
          }));
          row.append($('<button/>', {
            "class": 'btn btn-default'
          }).text('Remove').click(function() {
            var element;
            element = $(this).parent().parent();
            $(this).parent().remove();
            return element.change();
          }));
          return self.element.append(row);
        };
        ref = this.contents;
        for (j = 0, len = ref.length; j < len; j++) {
          filter = ref[j];
          addRow(filter.channel, filter.type, filter.regexes);
        }
        $('#add-filter').click(function() {
          return addRow();
        });
        this.element.change(function() {
          self.contents = [];
          self.element.children('.row').each(function() {
            return self.contents.push({
              channel: $(this).children('.author').val(),
              type: $(this).children('.type').children(':selected').val(),
              regexes: $(this).children('.regex').val().split(',')
            });
          });
          self.save();
          self.filterAll();
          return window.refresh();
        });
        this.filterAll();
      }

      Filter.prototype.save = function() {
        return localStorage.setItem(this.storageString, JSON.stringify(this.contents));
      };

      Filter.prototype.allows = function(video) {
        var filter, j, k, l, len, len1, len2, ref, ref1, ref2, regex;
        if (video != null) {
          ref = this.contents;
          for (j = 0, len = ref.length; j < len; j++) {
            filter = ref[j];
            if (video.author === filter.channel) {
              if (filter.type === 'blacklist') {
                ref1 = filter.regexes;
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                  regex = ref1[k];
                  if (video.title.match(regex)) {
                    return false;
                  }
                }
              }
              if (filter.type === 'whitelist') {
                ref2 = filter.regexes;
                for (l = 0, len2 = ref2.length; l < len2; l++) {
                  regex = ref2[l];
                  if (video.title.match(regex)) {
                    return true;
                  }
                }
                return false;
              }
            }
          }
          return true;
        }
        return false;
      };

      Filter.prototype.filterAll = function() {
        var blocked, j, len, ref, ref1, results, video, videoList;
        if ((typeof unwatchedVideos !== "undefined" && unwatchedVideos !== null) && (typeof watchedVideos !== "undefined" && watchedVideos !== null) && (typeof blockedVideos !== "undefined" && blockedVideos !== null)) {
          ref = [[unwatchedVideos, false], [watchedVideos, false], [blockedVideos, true]];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            ref1 = ref[j], videoList = ref1[0], blocked = ref1[1];
            results.push((function() {
              var k, len1, ref2, results1;
              ref2 = videoList.videos;
              results1 = [];
              for (k = 0, len1 = ref2.length; k < len1; k++) {
                video = ref2[k];
                if (video != null) {
                  if (this.allows(video) === blocked) {
                    videoList.remove(video.id);
                    if (blocked) {
                      results1.push(unwatchedVideos.add(video));
                    } else {
                      results1.push(blockedVideos.add(video));
                    }
                  } else {
                    results1.push(void 0);
                  }
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }).call(this));
          }
          return results;
        }
      };

      return Filter;

    })();
    SavedInput = (function() {
      function SavedInput(selector1, storageString, defaultValue, listener) {
        var self, value;
        this.selector = selector1;
        this.storageString = storageString;
        this.property = ($(this.selector).prop('type') === 'checkbox' ? 'checked' : 'value');
        value = JSON.parse(localStorage.getItem(this.storageString)) || defaultValue;
        localStorage.setItem(this.storageString, value);
        $(this.selector).prop(this.property, value);
        self = this;
        $(this.selector).change(function(e) {
          localStorage.setItem(self.storageString, $(self.selector).prop(self.property));
          if (listener != null) {
            return listener(e);
          }
        });
      }

      SavedInput.prototype.value = function(value) {
        if (value != null) {
          localStorage.setItem(this.storageString, value);
          $(this.selector).prop(this.property, value);
        }
        return JSON.parse(localStorage.getItem(this.storageString));
      };

      return SavedInput;

    })();
    window.readData = function() {
      var getSubs, loadVideo, loadVideosFromChannel, loadVideosFromPlaylist;
      watchedVideos.clearOlderThan(new Date() - 1000 * 60 * 60 * 24 * historyInput.value());
      blockedVideos.clearOlderThan(new Date() - 1000 * 60 * 60 * 24 * historyInput.value());
      getSubs = function(pageToken) {
        return gapi.client.youtube.subscriptions.list({
          mine: true,
          part: 'snippet, contentDetails',
          maxResults: 50,
          pageToken: pageToken
        }).execute(function(response) {
          var val;
          loadVideosFromChannel((function() {
            var j, len, ref, results;
            ref = response.items;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              val = ref[j];
              results.push(val.snippet.resourceId.channelId);
            }
            return results;
          })());
          if (response.nextPageToken != null) {
            return getSubs(response.nextPageToken);
          }
        });
      };
      loadVideosFromChannel = function(channelIds) {
        return gapi.client.youtube.channels.list({
          part: 'contentDetails',
          id: channelIds.join(',')
        }).execute(function(response) {
          var j, len, ref, results, val;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            val = ref[j];
            results.push(loadVideosFromPlaylist(val.contentDetails.relatedPlaylists.uploads));
          }
          return results;
        });
      };
      loadVideosFromPlaylist = function(playlistId) {
        return gapi.client.youtube.playlistItems.list({
          part: 'snippet',
          playlistId: playlistId,
          maxResults: 50
        }).execute(function(response) {
          var item, j, len, ref, results;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            results.push(loadVideo(item.snippet));
          }
          return results;
        });
      };
      loadVideo = function(videoSnippet) {
        var thumbnail, video;
        thumbnail = null;
        $.each(videoSnippet.thumbnails, function(key, value) {
          if ((thumbnail === null || thumbnail.width < value.width) && value.url !== null) {
            return thumbnail = value;
          }
        });
        video = new Video(videoSnippet.title, videoSnippet.resourceId.videoId, videoSnippet.channelTitle, videoSnippet.channelId, videoSnippet.publishedAt, videoSnippet.description, thumbnail.url);
        if (video.publishedDate > (new Date() - 1000 * 60 * 60 * 24 * historyInput.value())) {
          if (filter.allows(video)) {
            if (watchedVideos.find(video.id) != null) {
              return watchedVideos.add(video);
            } else {
              return unwatchedVideos.add(video);
            }
          } else {
            return blockedVideos.add(video);
          }
        }
      };
      if (window.API_LOADED) {
        return getSubs();
      }
    };
    window.refresh = function() {
      var j, k, len, len1, results, videoList, videoLists;
      videoLists = [watchedVideos, unwatchedVideos, blockedVideos];
      for (j = 0, len = videoLists.length; j < len; j++) {
        videoList = videoLists[j];
        videoList.decideVisible();
      }
      results = [];
      for (k = 0, len1 = videoLists.length; k < len1; k++) {
        videoList = videoLists[k];
        results.push(videoList.addVideoToDom());
      }
      return results;
    };
    title = $('title').text();
    historyInput = new SavedInput('#history-length', 'days-into-history', 28);
    autoplayInput = new SavedInput('#autoplay', 'autoplay', false);
    expandInput = new SavedInput('#expand', 'expand', false);
    watchedVideos = new VideoList("watched-videos", '.watched-videos', false, 'Watched', '#watched', '#tab-watched');
    unwatchedVideos = new VideoList("unwatched-videos", '.unwatched-videos', true, 'Unwatched', '#unwatched', '#tab-unwatched');
    blockedVideos = new VideoList("blocked-videos", '.blocked-videos', false, 'Blocked', '#blocked', '#tab-blocked');
    filter = new Filter('video-filter', '.filter-panel');
    readDataInterval = null;
    updateInput = new SavedInput('#update-interval', 'update-interval', 5, function() {
      window.clearInterval(readDataInterval);
      if (updateInput.value() > 0) {
        return readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
      }
    });
    readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
    $('#refresh').click(window.readData);
    $(window).bind('scroll', window.refresh);
    $('#all-done').click(function() {
      return watchedVideos.addAllFrom(unwatchedVideos);
    });
    $('#all-undone').click(function() {
      return unwatchedVideos.addAllFrom(watchedVideos);
    });
    $('input[name="tab"]').change(function() {
      window.refresh();
      return window.scrollTo(0, 0);
    });
    onPlayerReady = function(event) {
      return event.target.playVideo();
    };
    onPlayerStateChange = function(event) {
      var $expanded, $video;
      $video = $(event.target.f).parent();
      if (event.data === YT.PlayerState.ENDED && autoplayInput.value() && $('#tab-unwatched').prop('checked')) {
        $video.next().find('.video').click();
        $video.find('.mark').click();
      }
      $expanded = $video.find('.expanded');
      if (event.data === YT.PlayerState.PLAYING && expandInput.value()) {
        $expanded.prop('checked', true);
        $expanded.change();
      }
      if (event.data === YT.PlayerState.ENDED) {
        $expanded.prop('checked', false);
        return $expanded.change();
      }
    };
    return window.refresh();
  });

}).call(this);

//# sourceMappingURL=index.js.map
