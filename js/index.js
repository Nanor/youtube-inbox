// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var $autoplay, $expand, $videos, SavedInput, Video, VideoList, addVideoToDom, historyInput, onPlayerReady, onPlayerStateChange, readDataInterval, refreshScreen, refreshTimer, title, unwatchedVideos, updateInput, watchedVideos;
    Video = (function() {
      function Video(title1, link, author, authorId, publishedDate, description1, thumbnail1) {
        this.title = title1;
        this.link = link;
        this.author = author;
        this.authorId = authorId;
        this.publishedDate = publishedDate;
        this.description = description1;
        this.thumbnail = thumbnail1;
      }

      return Video;

    })();
    VideoList = (function() {
      function VideoList(storageString, reversed) {
        this.storageString = storageString;
        if (reversed == null) {
          reversed = false;
        }
        this.videos = JSON.parse(localStorage.getItem(this.storageString)) || [];
        this.order = reversed ? 1 : -1;
      }

      VideoList.prototype.add = function(newVideo) {
        var j, len, ref, video;
        ref = this.videos;
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.link === newVideo.link) {
            return;
          }
        }
        this.videos.push(newVideo);
        return this.videos.sort(function(a, b) {
          return (a.publishedDate > b.publishedDate ? -1 : 1) * this.order;
        });
      };

      VideoList.prototype.remove = function(id) {
        var video;
        return this.videos = (function() {
          var j, len, ref, results;
          ref = this.videos;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            video = ref[j];
            if (video.link !== id) {
              results.push(video);
            }
          }
          return results;
        }).call(this);
      };

      VideoList.prototype.clearOlderThan = function(date) {
        var video;
        return this.videos = (function() {
          var j, len, ref, results;
          ref = this.videos;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            video = ref[j];
            if (new Date(video.publishedDate) > date) {
              results.push(video);
            }
          }
          return results;
        }).call(this);
      };

      VideoList.prototype.indexOf = function(id) {
        var ids, video;
        ids = (function() {
          var j, len, ref, results;
          ref = this.videos;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            video = ref[j];
            results.push(video.link);
          }
          return results;
        }).call(this);
        return ids.indexOf(id);
      };

      VideoList.prototype.get = function(index) {
        return this.videos[index];
      };

      VideoList.prototype.find = function(id) {
        var j, len, ref, video;
        ref = this.videos;
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.link === id) {
            return video;
          }
        }
      };

      VideoList.prototype.length = function() {
        return this.videos.length;
      };

      VideoList.prototype.save = function() {
        return localStorage.setItem(this.storageString, JSON.stringify(this.videos));
      };

      return VideoList;

    })();
    SavedInput = (function() {
      function SavedInput(selector, storageString, defaultValue, listener) {
        var self, value;
        this.selector = selector;
        this.storageString = storageString;
        this.property = ($(this.selector).prop('type') === 'checkbox' ? 'checked' : 'value');
        value = localStorage.getItem(this.storageString) || defaultValue;
        localStorage.setItem(this.storageString, value);
        $(this.selector).prop(this.property, value);
        self = this;
        $(this.selector).change(function(e) {
          localStorage.setItem(self.storageString, $(self.selector).prop(self.property));
          if (listener != null) {
            return listener(e);
          }
        });
      }

      SavedInput.prototype.value = function(value) {
        if (value != null) {
          localStorage.setItem(this.storageString, value);
          $(this.selector).prop(this.property, value);
        }
        return localStorage.getItem(this.storageString);
      };

      return SavedInput;

    })();
    historyInput = new SavedInput('#history-length', 'days-into-history', 28);
    title = $('title').text();
    watchedVideos = new VideoList("watched-videos", false);
    unwatchedVideos = new VideoList("unwatched-videos", true);
    window.readData = function() {
      var getSubs, loadVideo, loadVideosFromChannel, loadVideosFromPlaylist;
      watchedVideos.clearOlderThan(new Date() - 1000 * 60 * 60 * 24 * historyInput.value());
      getSubs = function(pageToken) {
        return gapi.client.youtube.subscriptions.list({
          mine: true,
          part: 'snippet, contentDetails',
          maxResults: 50,
          pageToken: pageToken
        }).execute(function(response) {
          var val;
          loadVideosFromChannel((function() {
            var j, len, ref, results;
            ref = response.items;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              val = ref[j];
              results.push(val.snippet.resourceId.channelId);
            }
            return results;
          })());
          if (response.nextPageToken != null) {
            return getSubs(response.nextPageToken);
          }
        });
      };
      loadVideosFromChannel = function(channelIds) {
        return gapi.client.youtube.channels.list({
          part: 'contentDetails',
          id: channelIds.join(',')
        }).execute(function(response) {
          var j, len, ref, results, val;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            val = ref[j];
            results.push(loadVideosFromPlaylist(val.contentDetails.relatedPlaylists.uploads));
          }
          return results;
        });
      };
      loadVideosFromPlaylist = function(playlistId) {
        return gapi.client.youtube.playlistItems.list({
          part: 'snippet',
          playlistId: playlistId,
          maxResults: 50
        }).execute(function(response) {
          var item, j, len, ref, results;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            results.push(loadVideo(item.snippet));
          }
          return results;
        });
      };
      loadVideo = function(videoSnippet) {
        var thumbnail, video;
        thumbnail = null;
        $.each(videoSnippet.thumbnails, function(key, value) {
          if ((thumbnail === null || thumbnail.width < value.width) && value.url !== null) {
            return thumbnail = value;
          }
        });
        video = new Video(videoSnippet.title, videoSnippet.resourceId.videoId, videoSnippet.channelTitle, videoSnippet.channelId, videoSnippet.publishedAt, videoSnippet.description, thumbnail.url);
        if (Date.parse(video.publishedDate) > (new Date() - 1000 * 60 * 60 * 24 * historyInput.value())) {
          if (watchedVideos.indexOf(video.link) === -1) {
            unwatchedVideos.add(video);
          }
        }
        return refreshScreen();
      };
      if (window.API_LOADED) {
        return getSubs();
      }
    };
    addVideoToDom = function(element, video, index) {
      var description, isUnwatchedVideo;
      isUnwatchedVideo = unwatchedVideos.indexOf(video.link) !== -1;
      description = $('<div/>', {
        "class": "description"
      });
      video.description.split(/\n(?:\n)+/).forEach(function(paragraph) {
        return description.append($('<p>' + paragraph.replace(/\n/g, '<br>') + '</p>'));
      });
      description.find('p').linkify({
        target: "_blank"
      });
      var videoContainer = $('<div/>', {class: 'video-container', id: video.link})
        .append($('<input/>', {type: 'checkbox', class: 'expanded', id: 'expand' + video.link}))
        .append($('<div/>', {class: "video"})
            .append($('<div/>', {class: "thumbnail"})
                .append($('<p/>', {text: video.title}))
                .append($('<img/>', {src: video.thumbnail}))
                .append($('<i/>', {class: 'fa fa-play fa-3x'}))))
        .append($('<div/>', {class: 'video-info'})
            .append($('<div/>', {class: 'author'})
                .append($('<a/>', {
                    href: 'http://www.youtube.com/channel/' + video.authorId,
                    target: "_blank",
                    text: 'by ' + video.author
                })))
            .append($('<div/>', {
                class: 'upload-date',
                text: 'uploaded ' + (new Date(video.publishedDate)).toLocaleString()
            }))
            .append($('<input/>', {type: 'checkbox', class: 'truncated', id: 'trunc' + video.link, 'checked': true}))
            .append(description)
            .append($('<label/>', {for: 'trunc' + video.link})
                .append($('<span/>', {class: 'read-more', text: 'Read more'}))
                .append($('<span/>', {class: 'read-less', text: 'Read less'}))))
        .append($('<div/>', {class: 'side-buttons'})
            .append($('<button/>', {
                class: 'mark btn btn-default',
                title: "Mark as " + (isUnwatchedVideo ? 'watched' : 'unwatched'),
            })
                .append($('<i/>', {class: 'fa fa-' + (isUnwatchedVideo ? "check" : "remove") + ' fa-3x'})))
            .append($('<a/>', {
                class: 'youtube-watch btn btn-default',
                title: "Watch on YouTube",
                href: "https://www.youtube.com/watch?v=" + video.link,
                target: "_blank"
            })
                .append($('<i/>', {class: 'fa fa-youtube fa-3x'})))
            .append($('<label/>', {for: 'expand' + video.link})
                .append($('<div/>', {class: 'expand-player btn btn-default', title: "Expand Video"})
                    .append($('<i/>', {class: 'fa fa-expand fa-3x'})))
                .append($('<div/>', {class: 'compress-player btn btn-default', title: "Compress Video"})
                    .append($('<i/>', {class: 'fa fa-compress fa-3x'})))));;
      $('.expanded').change(function() {
        video = $(this).next();
        return video.height(video.width() * 9 / 16);
      });
      if (index === 0) {
        element.prepend(videoContainer);
      } else if (index > $(element).children().length) {
        element.append(videoContainer);
      } else {
        $(element).children(':nth-child(' + index + ')').after(videoContainer);
      }
      if (videoContainer.find('.description').height() >= 250) {
        return videoContainer.find('.video-info').addClass('long');
      }
    };
    refreshTimer = null;
    refreshScreen = function() {
      var updateScreen;
      updateScreen = function() {
        var $videoList, addOneVideo, i, j, onUnwatchedTab, ref, videoList;
        watchedVideos.save();
        unwatchedVideos.save();
        $('title').text((unwatchedVideos.length() > 0 ? "(" + (unwatchedVideos.length()) + ") " : '') + title);
        $('#unwatched').find('.text').text("Unwatched (" + (unwatchedVideos.length()) + ")");
        $('#watched').find('.text').text("Watched (" + (watchedVideos.length()) + ")");
        onUnwatchedTab = $('#tab-unwatched').prop('checked');
        videoList = (onUnwatchedTab ? unwatchedVideos : watchedVideos);
        $videoList = (onUnwatchedTab ? $('.unwatched-videos') : $('.watched-videos'));
        for (i = j = 0, ref = $videoList.children().length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if ($("#" + videoList.get(i).link).length === 0) {
            addVideoToDom($videoList, videoList.get(i), i);
          }
        }
        addOneVideo = function() {
          var k, ref1, results;
          if ($(this).scrollTop() + $(this).innerHeight() * 2 >= $(document).height()) {
            results = [];
            for (i = k = 0, ref1 = videoList.length(); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
              if ($("#" + videoList.get(i).link).length === 0) {
                addVideoToDom($videoList, videoList.get(i), i);
                addOneVideo();
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        };
        addOneVideo();
        return refreshTimer = null;
      };
      if (refreshTimer != null) {
        clearTimeout(refreshTimer);
      } else {
        updateScreen();
      }
      return refreshTimer = setTimeout(updateScreen, 100);
    };
    $videos = $('.videos');
    $videos.on('click', '.mark', function() {
      var id;
      id = $(this).parent().parent().attr('id');
      if (unwatchedVideos.find(id) != null) {
        watchedVideos.add(unwatchedVideos.find(id));
        unwatchedVideos.remove(id);
      } else {
        unwatchedVideos.add(watchedVideos.find(id));
        watchedVideos.remove(id);
      }
      $("#" + id).remove();
      return refreshScreen();
    });
    $('#all-done').click(function() {
      var j, len, ref, video;
      ref = unwatchedVideos.videos;
      for (j = 0, len = ref.length; j < len; j++) {
        video = ref[j];
        watchedVideos.add(video);
      }
      unwatchedVideos.videos = [];
      $('.unwatched-videos').children('.video-container').remove();
      return refreshScreen();
    });
    $('#all-undone').click(function() {
      var j, len, ref, video;
      ref = watchedVideos.videos;
      for (j = 0, len = ref.length; j < len; j++) {
        video = ref[j];
        unwatchedVideos.add(video);
      }
      watchedVideos.videos = [];
      $('.watched-videos').children('.video-container').remove();
      return refreshScreen();
    });
    $('input[name="tab"]').change(function() {
      if ($('#tab-unwatched').prop('checked')) {
        $('.unwatched-videos').show();
        $('.watched-videos').hide();
      } else {
        $('.unwatched-videos').hide();
        $('.watched-videos').show();
      }
      window.scrollTo(0, 0);
      return refreshScreen();
    });
    $(window).bind('scroll', refreshScreen);
    readDataInterval = null;
    updateInput = new SavedInput('#update-interval', 'update-interval', 5, function() {
      window.clearInterval(readDataInterval);
      if (updateInput.value() > 0) {
        return readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
      }
    });
    readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
    $('#refresh').click(readData);
    $videos.on('click', '.video', function() {
      return new YT.Player(this, {
        height: $(this).width * 9 / 16,
        width: $(this).width,
        videoId: $(this).parent().attr('id'),
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    });
    onPlayerReady = function(event) {
      return event.target.playVideo();
    };
    $autoplay = $('#autoplay');
    $expand = $('#expand');
    onPlayerStateChange = function(event) {
      var $expanded, $video;
      $video = $(event.target.f).parent();
      if (event.data === YT.PlayerState.ENDED && $autoplay.is(':checked')) {
        $video.next().find('.video').click();
        $video.find('.done').click();
      }
      $expanded = $video.find('.expanded');
      if (event.data === YT.PlayerState.PLAYING && $expand.is(':checked')) {
        $expanded.prop('checked', true);
        $expanded.change();
      }
      if (event.data === YT.PlayerState.ENDED) {
        $expanded.prop('checked', false);
        return $expanded.change();
      }
    };
    $autoplay.prop('checked', localStorage.getItem('autoplay') === 'true');
    $autoplay.change(function() {
      return localStorage.setItem('autoplay', ($autoplay.is(':checked') ? 'true' : 'false'));
    });
    $expand.prop('checked', localStorage.getItem('expand') === 'true');
    return $expand.change(function() {
      return localStorage.setItem('expand', ($expand.is(':checked') ? 'true' : 'false'));
    });
  });

}).call(this);

//# sourceMappingURL=index.js.map
