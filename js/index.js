// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var $autoplay, $expand, $videos, SavedInput, Video, VideoList, historyInput, onPlayerReady, onPlayerStateChange, readDataInterval, title, unwatchedVideos, updateInput, watchedVideos;
    Video = (function() {
      function Video(title1, id1, author, authorId, publishedDate, description1, thumbnail1) {
        this.title = title1;
        this.id = id1;
        this.author = author;
        this.authorId = authorId;
        this.description = description1;
        this.thumbnail = thumbnail1;
        this.publishedDate = new Date(publishedDate);
      }

      Video.fromJson = function(json) {
        return new Video(json.title, json.id || json.link, json.author, json.authorId, json.publishedDate, json.description, json.thumbnail);
      };

      Video.prototype.addToDom = function(parent, index) {
        var description, isUnwatchedVideo, videoContainer;
        isUnwatchedVideo = unwatchedVideos.find(this.id) != null;
        description = $('<div/>', {
          "class": "description"
        });
        this.description.split(/\n(?:\n)+/).forEach(function(paragraph) {
          return description.append($('<p>' + paragraph.replace(/\n/g, '<br>') + '</p>'));
        });
        description.find('p').linkify({
          target: "_blank"
        });
        videoContainer = $('<div/>', {
          "class": 'video-container',
          id: 'video-' + this.id
        }).append($('<input/>', {
          type: 'checkbox',
          "class": 'expanded',
          id: 'expand' + this.id
        })).append($('<div/>', {
          "class": 'video'
        }).append($('<div/>', {
          "class": 'thumbnail'
        }).append($('<p/>', {
          text: this.title
        })).append($('<img/>', {
          src: this.thumbnail
        })).append($('<i/>', {
          "class": 'fa fa-play fa-3x'
        })))).append($('<div/>', {
          "class": 'video-info'
        }).append($('<div/>', {
          "class": 'author'
        }).append($('<a/>', {
          href: 'http://www.youtube.com/channel/' + this.authorId,
          target: '_blank',
          text: 'by ' + this.author
        }))).append($('<div/>', {
          "class": 'upload-date',
          text: 'uploaded ' + new Date(this.publishedDate).toLocaleString()
        })).append($('<input/>', {
          type: 'checkbox',
          "class": 'truncated',
          id: 'trunc' + this.id,
          'checked': true
        })).append(description).append($('<label/>', {
          "for": 'trunc' + this.id
        }).append($('<span/>', {
          "class": 'read-more',
          text: 'Read more'
        })).append($('<span/>', {
          "class": 'read-less',
          text: 'Read less'
        })))).append($('<div/>', {
          "class": 'side-buttons'
        }).append($('<button/>', {
          "class": 'mark btn btn-default',
          title: 'Mark as ' + (isUnwatchedVideo ? 'watched' : 'unwatched')
        }).append($('<i/>', {
          "class": 'fa fa-' + (isUnwatchedVideo ? 'check' : 'remove') + ' fa-3x'
        }))).append($('<a/>', {
          "class": 'youtube-watch btn btn-default',
          title: 'Watch on YouTube',
          href: 'https://www.youtube.com/watch?v=' + this.id,
          target: '_blank'
        }).append($('<i/>', {
          "class": 'fa fa-youtube fa-3x'
        }))).append($('<label/>', {
          "for": 'expand' + this.id
        }).append($('<div/>', {
          "class": 'expand-player btn btn-default',
          title: 'Expand Video'
        }).append($('<i/>', {
          "class": 'fa fa-expand fa-3x'
        }))).append($('<div/>', {
          "class": 'compress-player btn btn-default',
          title: 'Compress Video'
        }).append($('<i/>', {
          "class": 'fa fa-compress fa-3x'
        })))));
        $('.expanded').change(function() {
          var videoElement;
          videoElement = $(this).next();
          return videoElement.height(videoElement.width() * 9 / 16);
        });
        if (index === 0) {
          parent.prepend(videoContainer);
        } else if (index > $(parent).children().length) {
          parent.append(videoContainer);
        } else {
          parent.children(":nth-child(" + index + ")").after(videoContainer);
        }
        if (videoContainer.find('.description').height() >= 250) {
          return videoContainer.find('.video-info').addClass('long');
        }
      };

      return Video;

    })();
    VideoList = (function() {
      function VideoList(storageString, selector, reversed) {
        var video, videoList;
        this.storageString = storageString;
        if (reversed == null) {
          reversed = false;
        }
        this.htmlElement = $(selector);
        videoList = JSON.parse(localStorage.getItem(this.storageString)) || [];
        this.videos = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = videoList.length; j < len; j++) {
            video = videoList[j];
            results.push(Video.fromJson(video));
          }
          return results;
        })();
        this.order = (reversed ? 1 : -1);
        this.sort();
      }

      VideoList.prototype.add = function(newVideo) {
        var j, len, ref, video;
        ref = this.videos;
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.id === newVideo.id) {
            return;
          }
        }
        this.videos.push(newVideo);
        this.sort();
        this.save();
        if ($(this.selector).children().length >= this.indexOf(newVideo.id)) {
          newVideo.addToDom(this.htmlElement, this.indexOf(newVideo.id));
        }
        window.refresh();
        return this;
      };

      VideoList.prototype.sort = function() {
        var order;
        order = this.order;
        this.videos = this.videos.sort(function(a, b) {
          return (a.publishedDate > b.publishedDate ? 1 : -1) * order;
        });
        return this;
      };

      VideoList.prototype.remove = function(id) {
        var index, video;
        index = this.indexOf(id);
        if (index !== -1) {
          video = this.videos[index];
          this.videos.splice(index, 1);
          this.save();
          $('#video-' + video.id).remove();
          window.refresh();
          return video;
        }
      };

      VideoList.prototype.clearOlderThan = function(date) {
        var j, len, ref, results, video;
        ref = this.videos;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (new Date(video.publishedDate) < date) {
            results.push(this.remove(video.id));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };

      VideoList.prototype.indexOf = function(id) {
        var i, j, ref;
        for (i = j = 0, ref = this.videos.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if (this.videos[i].id === id) {
            return i;
          }
        }
        return -1;
      };

      VideoList.prototype.get = function(index) {
        return this.videos[index];
      };

      VideoList.prototype.find = function(id) {
        var j, len, ref, video;
        ref = this.videos;
        for (j = 0, len = ref.length; j < len; j++) {
          video = ref[j];
          if (video.id === id) {
            return video;
          }
        }
      };

      VideoList.prototype.length = function() {
        return this.videos.length;
      };

      VideoList.prototype.save = function() {
        return localStorage.setItem(this.storageString, JSON.stringify(this.videos));
      };

      VideoList.prototype.addVideoToDom = function() {
        var i, j, ref, results, video;
        if ($(window).scrollTop() + $(window).innerHeight() * 2 >= $(document).height()) {
          results = [];
          for (i = j = 0, ref = this.length(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            video = this.get(i);
            if ($("#video-" + video.id).length === 0) {
              video.addToDom(this.htmlElement, i);
              this.addVideoToDom();
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };

      return VideoList;

    })();
    SavedInput = (function() {
      function SavedInput(selector1, storageString, defaultValue, listener) {
        var self, value;
        this.selector = selector1;
        this.storageString = storageString;
        this.property = ($(this.selector).prop('type') === 'checkbox' ? 'checked' : 'value');
        value = localStorage.getItem(this.storageString) || defaultValue;
        localStorage.setItem(this.storageString, value);
        $(this.selector).prop(this.property, value);
        self = this;
        $(this.selector).change(function(e) {
          localStorage.setItem(self.storageString, $(self.selector).prop(self.property));
          if (listener != null) {
            return listener(e);
          }
        });
      }

      SavedInput.prototype.value = function(value) {
        if (value != null) {
          localStorage.setItem(this.storageString, value);
          $(this.selector).prop(this.property, value);
        }
        return localStorage.getItem(this.storageString);
      };

      return SavedInput;

    })();
    title = $('title').text();
    historyInput = new SavedInput('#history-length', 'days-into-history', 28);
    watchedVideos = new VideoList("watched-videos", '.watched-videos');
    unwatchedVideos = new VideoList("unwatched-videos", '.unwatched-videos', true);
    window.readData = function() {
      var getSubs, loadVideo, loadVideosFromChannel, loadVideosFromPlaylist;
      watchedVideos.clearOlderThan(new Date() - 1000 * 60 * 60 * 24 * historyInput.value());
      getSubs = function(pageToken) {
        return gapi.client.youtube.subscriptions.list({
          mine: true,
          part: 'snippet, contentDetails',
          maxResults: 50,
          pageToken: pageToken
        }).execute(function(response) {
          var val;
          loadVideosFromChannel((function() {
            var j, len, ref, results;
            ref = response.items;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              val = ref[j];
              results.push(val.snippet.resourceId.channelId);
            }
            return results;
          })());
          if (response.nextPageToken != null) {
            return getSubs(response.nextPageToken);
          }
        });
      };
      loadVideosFromChannel = function(channelIds) {
        return gapi.client.youtube.channels.list({
          part: 'contentDetails',
          id: channelIds.join(',')
        }).execute(function(response) {
          var j, len, ref, results, val;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            val = ref[j];
            results.push(loadVideosFromPlaylist(val.contentDetails.relatedPlaylists.uploads));
          }
          return results;
        });
      };
      loadVideosFromPlaylist = function(playlistId) {
        return gapi.client.youtube.playlistItems.list({
          part: 'snippet',
          playlistId: playlistId,
          maxResults: 50
        }).execute(function(response) {
          var item, j, len, ref, results;
          ref = response.items;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            results.push(loadVideo(item.snippet));
          }
          return results;
        });
      };
      loadVideo = function(videoSnippet) {
        var thumbnail, video;
        thumbnail = null;
        $.each(videoSnippet.thumbnails, function(key, value) {
          if ((thumbnail === null || thumbnail.width < value.width) && value.url !== null) {
            return thumbnail = value;
          }
        });
        video = new Video(videoSnippet.title, videoSnippet.resourceId.videoId, videoSnippet.channelTitle, videoSnippet.channelId, videoSnippet.publishedAt, videoSnippet.description, thumbnail.url);
        if (Date.parse(video.publishedDate) > (new Date() - 1000 * 60 * 60 * 24 * historyInput.value())) {
          if (watchedVideos.indexOf(video.id) === -1) {
            return unwatchedVideos.add(video);
          }
        }
      };
      if (window.API_LOADED) {
        return getSubs();
      }
    };
    window.refresh = function() {
      $('title').text((unwatchedVideos.length() > 0 ? "(" + (unwatchedVideos.length()) + ") " : '') + title);
      $('#unwatched').find('.text').text("Unwatched (" + (unwatchedVideos.length()) + ")");
      $('#watched').find('.text').text("Watched (" + (watchedVideos.length()) + ")");
      if ($('#tab-unwatched').prop('checked')) {
        return unwatchedVideos.addVideoToDom();
      } else {
        return watchedVideos.addVideoToDom();
      }
    };
    window.refresh();
    $videos = $('.videos');
    $videos.on('click', '.mark', function() {
      var id;
      id = $(this).parent().parent().attr('id').slice(6);
      if (unwatchedVideos.find(id) != null) {
        return watchedVideos.add(unwatchedVideos.remove(id));
      } else {
        return unwatchedVideos.add(watchedVideos.remove(id));
      }
    });
    $('#all-done').click(function() {
      var j, len, ref, video;
      ref = unwatchedVideos.videos;
      for (j = 0, len = ref.length; j < len; j++) {
        video = ref[j];
        watchedVideos.add(video);
      }
      unwatchedVideos.videos = [];
      return $('.unwatched-videos').children('.video-container').remove();
    });
    $('#all-undone').click(function() {
      var j, len, ref, video;
      ref = watchedVideos.videos;
      for (j = 0, len = ref.length; j < len; j++) {
        video = ref[j];
        unwatchedVideos.add(video);
      }
      watchedVideos.videos = [];
      return $('.watched-videos').children('.video-container').remove();
    });
    $('input[name="tab"]').change(function() {
      if ($('#tab-unwatched').prop('checked')) {
        $('.unwatched-videos').show();
        $('.watched-videos').hide();
      } else {
        $('.unwatched-videos').hide();
        $('.watched-videos').show();
      }
      window.scrollTo(0, 0);
      return window.refresh();
    });
    $(window).bind('scroll', window.refresh);
    readDataInterval = null;
    updateInput = new SavedInput('#update-interval', 'update-interval', 5, function() {
      window.clearInterval(readDataInterval);
      if (updateInput.value() > 0) {
        return readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
      }
    });
    readDataInterval = window.setInterval(readData, 1000 * 60 * updateInput.value());
    $('#refresh').click(readData);
    $videos.on('click', '.video', function() {
      return new YT.Player(this, {
        height: $(this).width * 9 / 16,
        width: $(this).width,
        videoId: $(this).parent().attr('id').slice(6),
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    });
    onPlayerReady = function(event) {
      return event.target.playVideo();
    };
    $autoplay = $('#autoplay');
    $expand = $('#expand');
    onPlayerStateChange = function(event) {
      var $expanded, $video;
      $video = $(event.target.f).parent();
      if (event.data === YT.PlayerState.ENDED && $autoplay.is(':checked')) {
        $video.next().find('.video').click();
        $video.find('.done').click();
      }
      $expanded = $video.find('.expanded');
      if (event.data === YT.PlayerState.PLAYING && $expand.is(':checked')) {
        $expanded.prop('checked', true);
        $expanded.change();
      }
      if (event.data === YT.PlayerState.ENDED) {
        $expanded.prop('checked', false);
        return $expanded.change();
      }
    };
    $autoplay.prop('checked', localStorage.getItem('autoplay') === 'true');
    $autoplay.change(function() {
      return localStorage.setItem('autoplay', ($autoplay.is(':checked') ? 'true' : 'false'));
    });
    $expand.prop('checked', localStorage.getItem('expand') === 'true');
    return $expand.change(function() {
      return localStorage.setItem('expand', ($expand.is(':checked') ? 'true' : 'false'));
    });
  });

}).call(this);

//# sourceMappingURL=index.js.map
